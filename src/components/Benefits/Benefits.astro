---
// imports
import styles from "./Benefits.module.css";
import {
  SwatchBook,
  Gauge,
  SearchCheck,
  MousePointerClick,
  MonitorSmartphone,
} from "@lucide/astro";

import { t, getValidLang } from "../../utils/i18n";

const { lang } = Astro.params;
const langCode = getValidLang(lang);
---

<section class={styles.fourthPart}>
  <h3>{t(langCode, "benefits.title")}</h3>

  <article
    class={`${styles.containerWrapper} ${styles.glowGroup}`}
    data-glow-group
  >
    <div class={styles.wrapperBenefits}>
      <div class={`${styles.benefits} ${styles.benefitsGlow}`} data-glow>
        <SwatchBook size={40} class={styles.icon} />
        <h4>{t(langCode, "benefits.title-card1")}</h4>
        <p>{t(langCode, "benefits.p-card1")}</p>
      </div>

      <div class={`${styles.benefits} ${styles.benefitsGlow}`} data-glow>
        <Gauge size={40} class={styles.icon} />
        <h4>{t(langCode, "benefits.title-card2")}</h4>
        <p>{t(langCode, "benefits.p-card2")}</p>
      </div>

      <div class={`${styles.benefits} ${styles.benefitsGlow}`} data-glow>
        <SearchCheck size={40} class={styles.icon} />
        <h4>{t(langCode, "benefits.title-card3")}</h4>
        <p>{t(langCode, "benefits.p-card3")}</p>
      </div>

      <div class={`${styles.benefits} ${styles.benefitsGlow}`} data-glow>
        <MousePointerClick size={40} class={styles.icon} />
        <h4>{t(langCode, "benefits.title-card4")}</h4>
        <p>{t(langCode, "benefits.p-card4")}</p>
      </div>

      <div class={`${styles.benefits} ${styles.benefitsGlow}`} data-glow>
        <MonitorSmartphone size={40} class={styles.icon} />
        <h4>{t(langCode, "benefits.title-card5")}</h4>
        <p>{t(langCode, "benefits.p-card5")}</p>
      </div>
    </div>
  </article>

  <!-- Script al final para el efecto glow -->
  <script>
    if (typeof window !== "undefined") {
      const group = document.querySelector(
        "[data-glow-group]"
      ) as HTMLElement | null;
      const cards = document.querySelectorAll(
        "[data-glow]"
      ) as NodeListOf<HTMLElement>;

      if (group) {
        group.addEventListener("mousemove", (e) => {
          const event = e as MouseEvent;

          cards.forEach((card) => {
            const rect = card.getBoundingClientRect();
            const x = ((event.clientX - rect.left) / rect.width) * 100;
            const y = ((event.clientY - rect.top) / rect.height) * 100;
            card.style.setProperty("--x", `${x}%`);
            card.style.setProperty("--y", `${y}%`);
          });
        });

        group.addEventListener("mouseleave", () => {});
      }
    }
  </script>
</section>
